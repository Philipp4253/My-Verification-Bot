"""Middleware –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ."""

from typing import Callable, Dict, Any, Awaitable, Set, Union
from datetime import datetime, timedelta

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message
from loguru import logger

from bot.database.manager import DatabaseManager
from bot.services.whitelist_service import WhitelistService
from config.settings import Settings


class GroupVerificationMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def __init__(self, db_manager: DatabaseManager, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware.

        Args:
            db_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.db_manager = db_manager
        self.settings = settings
        self.whitelist_service = WhitelistService(db_manager)

        self._verified_users_cache: Set[Union[int, str]] = set()
        self._whitelist_cache: Set[int] = set()
        self._cache_ttl = 300
        self._last_cache_update = datetime.now()

        super().__init__()

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ middleware –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        """
        if not isinstance(event, Message):
            return await handler(event, data)

        username = f"@{event.from_user.username}" if event.from_user.username else event.from_user.first_name
        logger.info(f"üîç MIDDLEWARE: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.from_user.id} ({username}) –≤ —á–∞—Ç–µ {event.chat.id}")

        group = await self.db_manager.groups.get_by_id(event.chat.id)
        if not group or not group.is_active:
            logger.info(f"üîç MIDDLEWARE: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç {event.chat.id}, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø–æ–π")
            return await handler(event, data)

        if event.from_user.is_bot or not event.from_user:
            return await handler(event, data)

        if event.content_type in ['new_chat_members', 'left_chat_member', 'pinned_message']:
            return await handler(event, data)

        user_id = event.from_user.id

        if user_id in self.settings.admin_user_ids:
            logger.debug(f"üëë –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω {user_id} (@{event.from_user.username}) –ø—Ä–æ–ø—É—â–µ–Ω")
            return await handler(event, data)

        try:
            chat_member = await event.bot.get_chat_member(event.chat.id, user_id)
            if chat_member.status in ['administrator', 'creator']:
                logger.debug(f"üëë –ê–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã {user_id} (@{event.from_user.username}) –ø—Ä–æ–ø—É—â–µ–Ω")
                return await handler(event, data)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è {user_id}: {e}")

        logger.info(f"üîç MIDDLEWARE: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        username = event.from_user.username

        is_in_whitelist = await self._check_user_whitelist(user_id, username, event.chat.id)
        if is_in_whitelist:
            await self.whitelist_service.auto_verify_whitelist_user(user_id, username=username)
            self.add_verified_user_to_cache(user_id)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username or 'N/A'}) –∏–∑ whitelist –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return await handler(event, data)

        is_verified = await self._check_user_verification(user_id, event.chat.id)
        if is_verified:
            logger.debug(f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—â–µ–Ω")
            return await handler(event, data)
        
        should_block = await self._should_block_message(user_id, event.chat.id)
        if should_block:
            logger.info(f"üö´ MIDDLEWARE: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self._handle_unverified_user_message(event)
            return None
        else:
            logger.debug(f"üîÑ MIDDLEWARE: –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ä–µ–∂–∏–º checkin –∏–ª–∏ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫)")
            result = await handler(event, data)
            logger.debug(f"üîÑ MIDDLEWARE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –¥–ª—è {user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return result

    async def _check_user_whitelist(self, user_id: int, username: str = None, group_id: int = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist, False –∏–Ω–∞—á–µ
        """
        if datetime.now() - self._last_cache_update > timedelta(seconds=self._cache_ttl):
            self._whitelist_cache.clear()

        if user_id in self._whitelist_cache:
            return True

        try:
            is_in_whitelist = await self.whitelist_service.check_user_in_whitelist(user_id, username, group_id)

            if is_in_whitelist:
                self._whitelist_cache.add(user_id)
                return True

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    async def _check_user_verification(self, user_id: int, group_id: int = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_id: ID –≥—Ä—É–ø–ø—ã

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ, False –∏–Ω–∞—á–µ
        """
        if not group_id:
            return False

        cache_key = f"{user_id}_{group_id}"

        if datetime.now() - self._last_cache_update > timedelta(seconds=self._cache_ttl):
            self._verified_users_cache.clear()
            self._last_cache_update = datetime.now()

        if cache_key in self._verified_users_cache:
            return True

        try:
            verification = await self.db_manager.user_group_verifications.get_by_user_and_group(user_id, group_id)

            if verification and verification.verified:
                self._verified_users_cache.add(cache_key)
                return True

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
            return False

    async def _should_block_message(self, user_id: int, group_id: int) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ middleware.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_id: ID –≥—Ä—É–ø–ø—ã
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, False –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        """
        try:
            group = await self.db_manager.groups.get_by_id(group_id)
            if not group:
                return True
                
            verification = await self.db_manager.user_group_verifications.get_by_user_and_group(user_id, group_id)
            
            if verification and verification.requires_verification:
                logger.debug(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_id}: –±–ª–æ–∫–∏—Ä—É–µ–º –≤ middleware")
                return True
            elif group.checkin_mode:
                logger.debug(f"–†–µ–∂–∏–º checkin –≤–∫–ª—é—á–µ–Ω –¥–ª—è {user_id}: –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
                return False
            else:
                logger.debug(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_id}, —Ä–µ–∂–∏–º checkin –≤—ã–∫–ª—é—á–µ–Ω: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
            return True

    async def _handle_unverified_user_message(self, message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        user_id = message.from_user.id

        try:
            await message.delete()
            logger.info(f"üö´ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    def invalidate_user_cache(self, user_id: int, group_id: int = None):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_id: ID –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
        """
        if group_id:
            cache_key = f"{user_id}_{group_id}"
            self._verified_users_cache.discard(cache_key)
            logger.debug(f"üîÑ –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}")
        else:
            to_remove = [key for key in self._verified_users_cache if key.startswith(f"{user_id}_")]
            for key in to_remove:
                self._verified_users_cache.discard(key)
            logger.debug(f"üîÑ –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö")

    def add_verified_user_to_cache(self, user_id: int, group_id: int = None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_id: ID –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ None, –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ user_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        if group_id:
            cache_key = f"{user_id}_{group_id}"
            self._verified_users_cache.add(cache_key)
            logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
        else:
            self._verified_users_cache.add(user_id)
            logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–≥–ª–æ–±–∞–ª—å–Ω–æ)")

    def invalidate_whitelist_cache(self, user_id: int):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∫—ç—à whitelist –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è/—É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ whitelist.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self._whitelist_cache.discard(user_id)
        logger.debug(f"üîÑ –û—á–∏—â–µ–Ω –∫—ç—à whitelist –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    def add_whitelist_user_to_cache(self, user_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à whitelist.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self._whitelist_cache.add(user_id)
        logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à whitelist")
