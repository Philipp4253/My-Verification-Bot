"""–°–µ—Ä–≤–∏—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."""

from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from loguru import logger
from typing import Dict, Any

from bot.database.manager import DatabaseManager
from bot.services.openai_service import OpenAIService
from bot.states.verification import VerificationStates
from config.settings import settings
import re
from bot.database.models.verification_log import VerificationMethod, VerificationLog


class VerificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.openai_service = OpenAIService()

    def _normalize_name(self, name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –§–ò–û –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        if not name:
            return ""
        normalized = re.sub(r'\s+', ' ', name.strip().lower())
        normalized = normalized.replace('.', '')
        return normalized

    def _compare_full_names(self, input_name: str, found_name: str) -> bool:
        """–°—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –§–ò–û."""
        if not input_name or not found_name:
            return False

        input_normalized = self._normalize_name(input_name)
        found_normalized = self._normalize_name(found_name)

        logger.info("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –§–ò–û:")
        logger.info(f"   –í–≤–µ–¥–µ–Ω–æ: '{input_name}' ‚Üí '{input_normalized}'")
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ: '{found_name}' ‚Üí '{found_normalized}'")

        exact_match = input_normalized == found_normalized

        if exact_match:
            logger.info("‚úÖ –§–ò–û —Å–æ–≤–ø–∞–¥–∞—é—Ç —Ç–æ—á–Ω–æ")
            return True
        else:
            logger.warning("‚ùå –§–ò–û –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False

    async def start_verification_process(self, message: Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI."""
        await message.answer(
            "‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã."
        )

        await state.set_state(VerificationStates.processing_verification)

        data = await state.get_data()
        user_id = message.from_user.id

        try:
            if data["method"] == VerificationMethod.WEBSITE:
                result = await self.openai_service.verify_website(
                    full_name=data["full_name"],
                    workplace=data["workplace"],
                    website_url=data["website_url"]
                )
            else:
                result = await self.openai_service.verify_document(
                    full_name=data["full_name"],
                    workplace=data["workplace"],
                    file_id=data["document_file_id"]
                )

            log = VerificationLog(
                user_id=user_id,
                method=data["method"],
                full_name=data["full_name"],
                workplace=data["workplace"],
                website_url=data.get("website_url"),
                details=f"{data['full_name']} - {data['workplace']}",
                openai_response=str(result),
                result="processing"
            )
            await self.db_manager.logs.add(log)

            is_verified = self._analyze_openai_json_response(result, data["full_name"])

            if is_verified:
                await self._handle_successful_verification(message, state, data)
            else:
                await self._handle_failed_verification(message, state)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            log = VerificationLog(
                user_id=user_id,
                method=data.get("method"),
                full_name=data.get("full_name"),
                workplace=data.get("workplace"),
                website_url=data.get("website_url"),
                details=f"{data.get('full_name', 'N/A')} - {data.get('workplace', 'N/A')}",
                result="error",
                openai_response=f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            await self.db_manager.logs.add(log)

            try:
                await message.bot.send_message(
                    message.from_user.id,
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}")
            await state.clear()

    def _analyze_openai_json_response(self, result: Dict[str, Any], input_full_name: str) -> bool:
        """–ê–Ω–∞–ª–∏–∑ JSON –æ—Ç–≤–µ—Ç–∞ OpenAI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        if not result or not isinstance(result, dict):
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            return False

        found = result.get("found", False)
        confidence = result.get("confidence", "low")
        explanation = result.get("explanation", "–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è")
        is_medical_document = result.get("is_medical_document", False)
        medical_indicators = result.get("medical_indicators", [])
        issuing_organization = result.get("issuing_organization", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        document_type = result.get("document_type", "")
        found_name = result.get("found_name", "")

        logger.info("=" * 60)
        logger.info("üéØ –ê–ù–ê–õ–ò–ó –†–ï–®–ï–ù–ò–Ø –û –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
        logger.info("=" * 60)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {found}")
        logger.info(f"üéöÔ∏è –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
        logger.info(f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}")
        logger.info(f"üë§ –ù–∞–π–¥–µ–Ω–Ω–æ–µ –§–ò–û: {found_name}")
        logger.info(f"üè• –Ø–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {is_medical_document}")
        logger.info(f"üî¨ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {medical_indicators}")
        logger.info(f"üè¢ –í—ã–¥–∞–≤—à–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {issuing_organization}")
        logger.info(f"üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}")
        logger.info("-" * 60)

        is_website_verification = "sources" in result or not document_type
        is_document_verification = document_type and "sources" not in result

        logger.info(f"üîç –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {'–í–µ–±-—Å–∞–π—Ç' if is_website_verification else '–î–æ–∫—É–º–µ–Ω—Ç'}")

        if is_document_verification:
            if not is_medical_document:
                logger.info("‚ùå –†–ï–®–ï–ù–ò–ï: –û–¢–ö–õ–û–ù–ï–ù–û")
                logger.info("–ü—Ä–∏—á–∏–Ω–∞: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º")
                logger.info("=" * 60)
                return False

            if not medical_indicators or len(medical_indicators) == 0:
                logger.info("‚ùå –†–ï–®–ï–ù–ò–ï: –û–¢–ö–õ–û–ù–ï–ù–û")
                logger.info("–ü—Ä–∏—á–∏–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
                logger.info("=" * 60)
                return False

        if found and found_name:
            names_match = self._compare_full_names(input_full_name, found_name)
            if not names_match:
                logger.info("‚ùå –†–ï–®–ï–ù–ò–ï: –û–¢–ö–õ–û–ù–ï–ù–û")
                logger.info("–ü—Ä–∏—á–∏–Ω–∞: –§–ò–û –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Ç–æ—á–Ω–æ")
                logger.info("=" * 60)
                return False

        if found and confidence in ["high", "medium"]:
            logger.info("‚úÖ –†–ï–®–ï–ù–ò–ï: –û–î–û–ë–†–ï–ù–û")
            logger.info("=" * 60)
            return True
        else:
            logger.info("‚ùå –†–ï–®–ï–ù–ò–ï: –û–¢–ö–õ–û–ù–ï–ù–û")
            if found and confidence == "low":
                logger.warning("–ü—Ä–∏—á–∏–Ω–∞: –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
            elif not found:
                logger.info("–ü—Ä–∏—á–∏–Ω–∞: –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logger.info("=" * 60)
            return False

    async def _handle_successful_verification(
        self,
        message: Message,
        state: FSMContext,
        data: dict
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        user_id = message.from_user.id

        state_data = await state.get_data()
        group_id = state_data.get('group_id')

        if not group_id:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω group_id –≤ FSM state –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                await message.bot.send_message(
                    message.from_user.id,
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return

        await self.db_manager.user_group_verifications.update_verified_status(user_id, group_id, True, "manual")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ requires_verification –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await self.db_manager.user_group_verifications.update_requires_verification(user_id, group_id, False)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await self.db_manager.message_counts.reset_count(user_id, group_id)

        await self.db_manager.logs.update_verification_result(user_id, "success")
        await self.db_manager.user_group_verifications.update_state(user_id, group_id, None)

        logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {group_id}, –∫—ç—à –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        success_message = "üéâ <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>"

        try:
            await message.bot.send_message(message.from_user.id, success_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        try:
            from bot.handlers.group_events import delete_verification_notice
            await delete_verification_notice(user_id)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –¥–ª—è {user_id}: {e}")

        await state.clear()
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {group_id}: {data['full_name']} - {data['workplace']}")

    async def _handle_failed_verification(
        self,
        message: Message,
        state: FSMContext
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        user_id = message.from_user.id

        state_data = await state.get_data()
        group_id = state_data.get('group_id')

        await self.db_manager.logs.update_verification_result(user_id, "failed")

        if group_id:
            await self.db_manager.user_group_verifications.update_state(user_id, group_id, None)
            verification = await self.db_manager.user_group_verifications.get_by_user_and_group(user_id, group_id)
            remaining_attempts = settings.max_verification_attempts - verification.attempts_count if verification else 0
        else:
            await self.db_manager.users.update_step(user_id, None)
            user = await self.db_manager.users.get_by_id(user_id)
            remaining_attempts = settings.max_verification_attempts - user.attempts_count if user else 0

        failure_message = "‚ùå <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞</b>"

        if remaining_attempts > 0:
            failure_message += "\n\nüîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"

        try:
            await message.bot.send_message(message.from_user.id, failure_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await state.clear()

        group_info = f" –≤ –≥—Ä—É–ø–ø–µ {group_id}" if group_id else ""
        logger.info(
            f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}{group_info} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_attempts}")

    async def get_user_profile_text(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
        user = await self.db_manager.users.get_by_id(user_id)
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        status_emoji = "‚úÖ" if user.verified else "‚ùå"
        status_text = "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if user.verified else "–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"

        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî <b>ID:</b> {user.user_id}\n"
            f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        )

        if user.verified and user.verified_at:
            profile_text += f"üìÖ <b>–î–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> {user.verified_at.strftime('%d.%m.%Y %H:%M')}\n"

        if user.created_at:
            profile_text += f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"

        profile_text += f"üî¢ <b>–ü–æ–ø—ã—Ç–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> {user.attempts_count}\n"

        profile_text += (
            "\n<i>‚ÑπÔ∏è –°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, "
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.</i>"
        )

        return profile_text
