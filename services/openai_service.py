"""–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Ä–∞—á–µ–π."""
import base64
import json
from typing import Optional, Tuple, Dict, Any
from openai import AsyncOpenAI
from loguru import logger

from config.settings import settings


class OpenAIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI API."""

    def __init__(self):
        self.client = AsyncOpenAI(api_key=settings.openai_api_key)
        self.model = settings.openai_model

    async def verify_website(self, full_name: str, workplace: str, website_url: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–∞—á–∞ –Ω–∞ —Å–∞–π—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–µ–±-–ø–æ–∏—Å–∫–∞.

        Args:
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –≤—Ä–∞—á–∞
            workplace: –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –≤—Ä–∞—á–∞
            website_url: URL —Å–∞–π—Ç–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        try:
            prompt = (
                f"–ü—Ä–æ–≤–µ—Ä—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –≤—Ä–∞—á {full_name} –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {workplace}. "
                f"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ {website_url} –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. "
                f"–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
            )

            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ web search: {full_name} –≤ {workplace} –Ω–∞ {website_url}")

            response = await self.client.responses.create(
                model=self.model,
                tools=[{"type": "web_search_preview"}],
                text={
                    "format": {
                        "type": "json_schema",
                        "name": "verification_result",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "found": {
                                    "type": "boolean",
                                    "description": "–ù–∞–π–¥–µ–Ω –ª–∏ –≤—Ä–∞—á –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã"
                                },
                                "confidence": {
                                    "type": "string",
                                    "enum": ["high", "medium", "low"],
                                    "description": "–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
                                },
                                "explanation": {
                                    "type": "string",
                                    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"
                                },
                                "sources": {
                                    "type": "array",
                                    "items": {"type": "string"},
                                    "description": "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                                },
                                "found_name": {
                                    "type": "string",
                                    "description": "–¢–æ—á–Ω–æ–µ –§–ò–û –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞ —Å–∞–π—Ç–µ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ)"
                                }
                            },
                            "required": ["found", "confidence", "explanation", "sources", "found_name"],
                            "additionalProperties": False
                        },
                        "strict": True
                    }
                },
                input=[
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤. "
                            "–ò—Å–ø–æ–ª—å–∑—É–π web search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–∞—á–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö. "
                            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å –¢–û–ß–ù–û - —Ñ–∞–º–∏–ª–∏—è, –∏–º—è –ò –æ—Ç—á–µ—Å—Ç–≤–æ! "
                            "–õ—é–±–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –§–ò–û = –ù–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. "
                            "–ü—Ä–∏–º–µ—Ä—ã –ù–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: "
                            "'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' ‚â† '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á' (—Ä–∞–∑–Ω—ã–µ –æ—Ç—á–µ—Å—Ç–≤–∞) "
                            "'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' ‚â† '–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' (—Ä–∞–∑–Ω—ã–µ —Ñ–∞–º–∏–ª–∏–∏) "
                            "'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' ‚â† '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á' (—Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞) "
                            "–í–æ–∑–≤—Ä–∞—â–∞–π found: true —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –¢–û–ß–ù–û–ú —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π. "
                            "–í –ø–æ–ª–µ found_name —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω–æ–µ –§–ò–û, –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞ —Å–∞–π—Ç–µ. "
                            "–ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º –≤ –æ—Ü–µ–Ω–∫–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
                        )
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )

            result = json.loads(response.output_text)

            logger.info("=" * 60)
            logger.info("üîç OPENAI WEB SEARCH VERIFICATION RESPONSE")
            logger.info("=" * 60)
            logger.info(f"üë§ User: {full_name}")
            logger.info(f"üè• Workplace: {workplace}")
            logger.info(f"üåê Website: {website_url}")
            logger.info("-" * 60)
            logger.info("üìÑ JSON Response:")
            logger.info(json.dumps(result, ensure_ascii=False, indent=2))
            logger.info("=" * 60)

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ web search –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {
                "found": False,
                "confidence": "low",
                "explanation": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}",
                "sources": [],
                "found_name": ""
            }

    async def verify_document(self, full_name: str, workplace: str, file_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—Ä–∞—á–∞.

        Args:
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –≤—Ä–∞—á–∞
            workplace: –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –≤—Ä–∞—á–∞
            file_id: ID —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        try:
            from aiogram import Bot
            from config.settings import settings

            bot = Bot(token=settings.get_telegram_bot_token())
            file = await bot.get_file(file_id)
            file_data = await bot.download_file(file.file_path)

            await bot.session.close()

            return await self.verify_diploma_document(full_name, file_data.read(), "image/jpeg", workplace)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return {
                "found": False,
                "confidence": "low",
                "explanation": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}",
                "document_type": "unknown",
                "found_name": "",
                "is_medical_document": False,
                "medical_indicators": [],
                "issuing_organization": ""
            }

    async def verify_diploma_document(self, full_name: str, image_data: bytes, file_type: str, workplace: str = "") -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–∏–ø–ª–æ–º–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º—è –≤—Ä–∞—á–∞.

        Args:
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –≤—Ä–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            image_data: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_type: MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
            workplace: –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –≤—Ä–∞—á–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            base64_image = base64.b64encode(image_data).decode('utf-8')

            logger.info(f"–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ä–∞—á–∞ {full_name}")

            response = await self.client.responses.create(
                model=self.model,
                text={
                    "format": {
                        "type": "json_schema",
                        "name": "document_verification",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "found": {
                                    "type": "boolean",
                                    "description": "–ù–∞–π–¥–µ–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –§–ò–û –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"
                                },
                                "confidence": {
                                    "type": "string",
                                    "enum": ["high", "medium", "low"],
                                    "description": "–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
                                },
                                "explanation": {
                                    "type": "string",
                                    "description": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"
                                },
                                "document_type": {
                                    "type": "string",
                                    "description": "–¢–∏–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                                },
                                "found_name": {
                                    "type": "string",
                                    "description": "–ù–∞–π–¥–µ–Ω–Ω–æ–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –§–ò–û (–µ—Å–ª–∏ –µ—Å—Ç—å)"
                                },
                                "is_medical_document": {
                                    "type": "boolean",
                                    "description": "–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º (–¥–∏–ø–ª–æ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –≤—Ä–∞—á–∞)"
                                },
                                "medical_indicators": {
                                    "type": "array",
                                    "items": {"type": "string"},
                                    "description": "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"
                                },
                                "issuing_organization": {
                                    "type": "string",
                                    "description": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –≤—ã–¥–∞–≤—à–∞—è –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)"
                                }
                            },
                            "required": ["found", "confidence", "explanation", "document_type", "found_name", "is_medical_document", "medical_indicators", "issuing_organization"],
                            "additionalProperties": False
                        },
                        "strict": True
                    }
                },
                input=[
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
                            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å –¢–û–ß–ù–û - —Ñ–∞–º–∏–ª–∏—è, –∏–º—è –ò –æ—Ç—á–µ—Å—Ç–≤–æ! "
                            "–õ—é–±–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –§–ò–û = –ù–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. "
                            "–ü—Ä–∏–º–µ—Ä—ã –ù–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: "
                            "'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' ‚â† '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á' (—Ä–∞–∑–Ω—ã–µ –æ—Ç—á–µ—Å—Ç–≤–∞) "
                            "'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' ‚â† '–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' (—Ä–∞–∑–Ω—ã–µ —Ñ–∞–º–∏–ª–∏–∏) "
                            "'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á' ‚â† '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á' (—Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞) "
                            "–í–æ–∑–≤—Ä–∞—â–∞–π found: true —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –¢–û–ß–ù–û–ú —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π. "
                            "–í –ø–æ–ª–µ found_name —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω–æ–µ –§–ò–û, –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ. "
                            "–í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–π, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π! "
                            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "
                            "- –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
                            "- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–º–µ–¥–∏—Ü–∏–Ω–∞, –≤—Ä–∞—á, –ª–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ, –ø–µ–¥–∏–∞—Ç—Ä–∏—è, —Ö–∏—Ä—É—Ä–≥–∏—è –∏ —Ç.–¥.) "
                            "- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—á–∞—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π "
                            "- –ù–æ–º–µ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–π –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ "
                            "- –ü–æ–¥–ø–∏—Å–∏ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã—Ö –ª–∏—Ü –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π "
                            "–ù–ï –ø—Ä–∏–Ω–∏–º–∞–π: –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è, –ø–∞—Å–ø–æ—Ä—Ç–∞, —Å–ø—Ä–∞–≤–∫–∏ —Å —Ä–∞–±–æ—Ç—ã, "
                            "—Å–∞–º–æ–¥–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. "
                            "–í–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
                        )
                    },
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "input_text",
                                "text": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è/–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏. "
                                        f"–ò—â–∏ –§–ò–û: {full_name}. "
                                        f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: "
                                        f"–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ–¥. —É—á—Ä–µ–∂–¥–µ–Ω–∏–π, –ø–µ—á–∞—Ç–∏, –ø–æ–¥–ø–∏—Å–∏. "
                                        f"–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON."
                            },
                            {
                                "type": "input_image",
                                "image_url": f"data:{file_type};base64,{base64_image}"
                            }
                        ]
                    }
                ]
            )

            result = json.loads(response.output_text)

            logger.info("=" * 60)
            logger.info("üìÑ OPENAI DOCUMENT VERIFICATION RESPONSE")
            logger.info("=" * 60)
            logger.info(f"üë§ User: {full_name}")
            logger.info(f"üè• Workplace: {workplace}")
            logger.info(f"üìã File Type: {file_type}")
            logger.info(f"üìè Image Size: {len(image_data)} bytes")
            logger.info("-" * 60)
            logger.info("üìÑ JSON Response:")
            logger.info(json.dumps(result, ensure_ascii=False, indent=2))
            logger.info("=" * 60)

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {
                "found": False,
                "confidence": "low",
                "explanation": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}",
                "document_type": "unknown"
            }
