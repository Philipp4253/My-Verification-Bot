"""
–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è whitelist (–º–µ–Ω—é, —Å–ø–∏—Å–æ–∫).
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.services.admin_service import AdminService
from bot.services.whitelist_service import WhitelistService
from config.settings import Settings
from .utils import check_admin_permissions, get_whitelist_management_text_and_keyboard

router = Router()


@router.callback_query(F.data.startswith("admin:whitelist:manage:"))
async def show_whitelist_management(
    callback: CallbackQuery,
    admin_service: AdminService,
    whitelist_service: WhitelistService,
    settings: Settings
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º."""
    group_id = int(callback.data.split(':')[-1])
    if not await check_admin_permissions(callback, group_id, admin_service, settings):
        return

    text, keyboard = await get_whitelist_management_text_and_keyboard(whitelist_service, group_id)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        if "message is not modified" not in str(e):
            from loguru import logger
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é whitelist: {e}")

    await callback.answer()


@router.callback_query(F.data.startswith("admin:whitelist:list:"))
async def list_whitelisted_users(
    callback: CallbackQuery,
    admin_service: AdminService,
    whitelist_service: WhitelistService,
    settings: Settings
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ."""
    group_id = int(callback.data.split(':')[-1])
    if not await check_admin_permissions(callback, group_id, admin_service, settings):
        return

    entries = await whitelist_service.get_whitelist(group_id)

    if not entries:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.</b>"
    else:
        text_lines = ["üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"]
        for i, entry in enumerate(entries, 1):
            if entry.user_id:
                user_info = f"ID: <code>{entry.user_id}</code>"
            else:
                user_info = f"@{entry.username}"

            try:
                admin_user = await callback.bot.get_chat_member(callback.message.chat.id, entry.added_by)
                if admin_user.user.username:
                    admin_info = f"@{admin_user.user.username}"
                else:
                    admin_info = admin_user.user.first_name or f"ID: {entry.added_by}"
            except Exception:
                admin_info = f"ID: {entry.added_by}"

            text_lines.append(f"{i}. {user_info} (–¥–æ–±–∞–≤–∏–ª: {admin_info})")
        text = "\n".join(text_lines)

    keyboard = InlineKeyboardBuilder().button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:whitelist:manage:{group_id}").as_markup()

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("admin:panel:"))
async def close_admin_panel(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)."""
    try:
        await callback.message.delete()
    except Exception:
        await callback.message.edit_text("üëã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
    await callback.answer()
