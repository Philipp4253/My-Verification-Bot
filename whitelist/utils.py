"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è whitelist.
"""
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, CallbackQuery

from bot.services.admin_service import AdminService
from bot.services.whitelist_service import WhitelistService
from bot.handlers.admin.core import is_group_admin
from config.settings import Settings


def get_whitelist_keyboard(group_id: int) -> InlineKeyboardBuilder:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"admin:whitelist:add:{group_id}")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin:whitelist:remove:{group_id}")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫", callback_data=f"admin:whitelist:list:{group_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:panel:{group_id}")
    builder.adjust(2, 1, 1)
    return builder


async def check_admin_permissions(
    target: Message | CallbackQuery,
    group_id: int,
    admin_service: AdminService,
    settings: Settings
) -> bool:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not await is_group_admin(target.from_user, group_id, admin_service, settings):
        if isinstance(target, CallbackQuery):
            await target.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        else:
            error_message = await target.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            if target.chat.type in ["group", "supergroup"]:
                import asyncio
                asyncio.create_task(_delete_error_message(target, error_message))
        return False
    return True


async def get_whitelist_management_text_and_keyboard(whitelist_service: WhitelistService, group_id: int, status_message: str = ""):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    entries = await whitelist_service.get_whitelist(group_id)
    count = len(entries)
    text = (
        f"‚úÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Whitelist</b>\n\n"
        f"üë• –î–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ: <b>{count}</b>"
    )
    if status_message:
        text += f"\n\n<i>{status_message}</i>"

    keyboard = get_whitelist_keyboard(group_id).as_markup()
    return text, keyboard


async def _delete_error_message(original_message: Message, error_message: Message):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥."""
    import asyncio
    await asyncio.sleep(5)
    try:
        await error_message.delete()
        await original_message.delete()
    except Exception:
        pass
