import asyncio
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from bot.states.verification import VerificationStates
from bot.services.verification_service import VerificationService
from bot.database.manager import DatabaseManager
from config.settings import settings

group_events_router = Router(name="group_events_router")
group_events_router.message.filter(F.chat.type.in_(["group", "supergroup"]))


@group_events_router.message()
async def moderate_unverified_messages(message: Message, db_manager: DatabaseManager):
    """
    –ú–æ–¥–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ —Å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    
    –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (requires_verification=True): –í–°–ï–ì–î–ê –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (requires_verification=False): –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ checkin
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    –ê–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    if not message.from_user:
        return
        
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
    logger.debug(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} ({username}) –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}: '{message.text}'")
    
    if message.from_user.is_bot:
        return

    if message.text and message.text.startswith('/'):
        return
    
    try:
        chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        
        if chat_member.status in ["administrator", "creator"]:
            logger.debug(f"üëë –ê–¥–º–∏–Ω {message.from_user.id} ({username}) –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return

        from bot.services.whitelist_service import WhitelistService
        whitelist_service = WhitelistService(db_manager)
        if await whitelist_service.check_user_in_whitelist(message.from_user.id, message.from_user.username, message.chat.id):
            logger.debug(f"‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ whitelist {username} –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return

        verification = await db_manager.user_group_verifications.get_by_user_and_group(
            message.from_user.id,
            message.chat.id
        )

        if not verification:
            from bot.database.models.user import User
            db_user = await db_manager.users.get_user_by_telegram_id(message.from_user.id)
            if not db_user:
                user_model = User.from_aiogram(message.from_user)
                await db_manager.users.add_user(user_model)
            
            verification = await db_manager.user_group_verifications.create_for_existing_member(
                message.from_user.id, message.chat.id
            )
            logger.debug(f"üë§ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {username} (requires_verification=False)")

        if verification.verified:
            logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –ù–ï —É–¥–∞–ª–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return

        group = await db_manager.groups.get_by_id(message.chat.id)
        checkin_mode = group and group.checkin_mode
        
        should_delete = False
        reason = ""
        
        if checkin_mode:
            should_delete = True
            if verification.requires_verification:
                reason = "–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ä–µ–∂–∏–º–µ checkin"
            else:
                reason = "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ä–µ–∂–∏–º–µ checkin"
            logger.debug(f"üîß –†–µ–∂–∏–º checkin –≤–∫–ª—é—á–µ–Ω: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}")
        else:
            if verification.requires_verification:
                should_delete = True
                reason = "–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫"
                logger.debug(f"üÜï –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {username}")
            else:
                logger.debug(f"üë• –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {username}")
        
        if should_delete:
            await message.delete()
            
            message_count = await db_manager.message_counts.increment_count(message.from_user.id, message.chat.id)
            logger.debug(f"üìä –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_count} –æ—Ç {message.from_user.id} ({username}): {reason}")
            
            if message_count >= 3 and settings.enable_spam_protection:
                try:
                    await message.bot.ban_chat_member(message.chat.id, message.from_user.id)
                    group_name = group.group_name if group else f"ID {message.chat.id}"
                    logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–∞–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ '{group_name}' –∑–∞ —Å–ø–∞–º ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                    
                    await _cleanup_user_data(db_manager, message.from_user.id, message.chat.id)
                    return
                except Exception as ban_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {ban_error}")
            elif message_count >= 3:
                logger.debug(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–ø–∏—Å–∞–ª {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ —Å–ø–∞–º-–∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
            await _send_verification_reminder(message, db_manager)
        else:
            if verification.verified:
                logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –ù–ï —É–¥–∞–ª–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –ù–ï —É–¥–∞–ª–µ–Ω–æ - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º checkin")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}: {e}")


async def _send_verification_reminder(message: Message, db_manager: DatabaseManager):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    try:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="ü©∫ –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", 
                callback_data=f"start_verification:{message.chat.id}"
            )]
        ])
        
        group = await db_manager.groups.get_by_id(message.chat.id)
        group_name = group.group_name if group else "–≥—Ä—É–ø–ø–∞"
        
        await message.bot.send_message(
            message.from_user.id,
            f"üè• <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</b>\n\n"
            f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ \"{group_name}\" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n\n"
            f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        try:
            bot_username = (await message.bot.get_me()).username
            username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
            
            fallback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="ü©∫ –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", 
                    url=f"https://t.me/{bot_username}?start=verify_{message.chat.id}"
                )]
            ])
            
            warning_msg = await message.bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è {username}, –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
                f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 7 –¥–Ω–µ–π, –∏–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.",
                reply_markup=fallback_keyboard,
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            asyncio.create_task(_delete_message_after_delay(message.bot, message.chat.id, warning_msg.message_id, 60))
            
        except Exception as group_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}, {group_error}")


async def _delete_message_after_delay(bot, chat_id: int, message_id: int, delay_seconds: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏."""
    try:
        await asyncio.sleep(delay_seconds)
        await bot.delete_message(chat_id, message_id)
        logger.debug(f"üóëÔ∏è –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")


async def _cleanup_user_data(db_manager: DatabaseManager, user_id: int, group_id: int):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã."""
    try:
        await db_manager.user_group_verifications.delete_by_user_and_group(user_id, group_id)
        await db_manager.message_counts.reset_count(user_id, group_id)
        logger.debug(f"üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
