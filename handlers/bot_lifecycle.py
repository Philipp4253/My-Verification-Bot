"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∂–∏—Ö–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö.
(–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç, —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞)
"""
from aiogram import Router, F
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, KICKED, LEFT, MEMBER, ADMINISTRATOR
from aiogram.types import ChatMemberUpdated
from loguru import logger

from bot.services.group_service import GroupService


bot_lifecycle_router = Router(name="bot_lifecycle_router")


@bot_lifecycle_router.my_chat_member()
async def handle_my_chat_member(event: ChatMemberUpdated, group_service: GroupService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö.
    """
    old_status = event.old_chat_member.status if event.old_chat_member else "None"
    new_status = event.new_chat_member.status
    group_id = event.chat.id
    group_name = event.chat.title

    logger.info(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {old_status} -> {new_status} –≤ '{group_name}' ({group_id})")

    if new_status == "administrator" and old_status != "administrator":
        logger.success(f"üî• –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ '{group_name}' ({group_id})")
        await group_service.register_group(group_id, group_name)

    elif old_status == "administrator" and new_status in ["kicked", "left", "member"]:
        logger.warning(f"üö´ –ë–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ '{group_name}' ({group_id})")
        await group_service.deactivate_group(group_id)
