"""–•–µ–Ω–¥–ª–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""

from aiogram import Router, F
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import (
    ChatMemberUpdated,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from loguru import logger
import asyncio

from bot.middleware.services import DatabaseManager
from bot.database.models.user import User
from bot.services.admin_service import AdminService
from bot.services.group_service import GroupService
from bot.services.verification_service import VerificationService
from bot.services.whitelist_service import WhitelistService
from bot.states.verification import VerificationStates
from config.settings import settings

group_monitor_router = Router(name="group_monitor_router")


@group_monitor_router.chat_member()
async def on_chat_member_updated(event: ChatMemberUpdated, db_manager: DatabaseManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    user = event.new_chat_member.user if event.new_chat_member else event.old_chat_member.user

    logger.debug(f"üîç DEBUG: chat_member —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –≥—Ä—É–ø–ø–µ {event.chat.id}")

    if user.is_bot:
        logger.debug(f"ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ {user.username}")
        return

    old_status = event.old_chat_member.status if event.old_chat_member else "left"
    new_status = event.new_chat_member.status if event.new_chat_member else "left"

    logger.debug(f"üìä DEBUG: –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {old_status} -> {new_status}")

    if old_status == "left" and new_status == "member":
        logger.info(f"üÜï –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user.full_name} (@{user.username}), ID: {user.id}")
        logger.debug(f"üîÑ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ {user.id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è on_user_joined, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return

    if old_status != new_status and old_status != "left" and new_status != "left":
        logger.debug(f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è/–≤—ã—Ö–æ–¥–∞: {user.id} ({old_status} -> {new_status})")

    if old_status != new_status:
        if new_status in ["administrator", "creator"] and old_status not in ["administrator", "creator"]:
            logger.info(
                f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ {event.chat.id}")
            admin_service = AdminService(db_manager)
            chat_admins = await event.bot.get_chat_administrators(event.chat.id)
            await admin_service.update_group_admins(event.chat.id, chat_admins)

        elif old_status in ["administrator", "creator"] and new_status not in ["administrator", "creator"]:
            logger.info(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}) –ª–∏—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –≤ –≥—Ä—É–ø–ø–µ {event.chat.id}")
            admin_service = AdminService(db_manager)
            chat_admins = await event.bot.get_chat_administrators(event.chat.id)
            await admin_service.update_group_admins(event.chat.id, chat_admins)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–Ω–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É)
    if old_status in ["restricted", "kicked"] and new_status == "member":
        logger.info(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {user.full_name} (@{user.username}), ID: {user.id}")
        await _handle_new_member(event, user, db_manager)
        return


@group_monitor_router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_user_joined(event: ChatMemberUpdated, db_manager: DatabaseManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–∏—Å–∫.
    """
    logger.debug(f"üîç DEBUG: on_user_joined –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {event.chat.id}")

    user = event.new_chat_member.user
    if user.is_bot:
        logger.debug(f"ü§ñ on_user_joined: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ {user.username}")
        return

    logger.info(
        f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.full_name} (@{user.username}), ID: {user.id}"
    )

    await _handle_new_member(event, user, db_manager)




@group_monitor_router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
async def on_user_left(event: ChatMemberUpdated, db_manager: DatabaseManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã.
    """
    user = event.old_chat_member.user
    if user.is_bot:
        return

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É: {user.full_name} (@{user.username}), ID: {user.id}"
    )


async def _handle_new_member(event: ChatMemberUpdated, user, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É."""
    try:
        chat_member = await event.bot.get_chat_member(event.chat.id, user.id)
        if chat_member.status in ["administrator", "creator"]:
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {user.id}: {e}")

    whitelist_service = WhitelistService(db_manager)
    if await whitelist_service.check_user_in_whitelist(user.id, user.username, event.chat.id):
        await whitelist_service.auto_verify_whitelist_user(user.id, user.username, event.chat.id)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}) –∏–∑ whitelist –≥—Ä—É–ø–ø—ã {event.chat.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω."
        )
        return

    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    await _send_welcome_and_verification(event, user, db_manager)


async def _send_welcome_and_verification(
    event: ChatMemberUpdated, user, db_manager: DatabaseManager
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    verification = await db_manager.user_group_verifications.get_by_user_and_group(user.id, event.chat.id)
    if verification and verification.verified:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {event.chat.id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    db_user = await db_manager.users.get_user_by_telegram_id(user.id)
    if not db_user:
        user_model = User.from_aiogram(user)
        await db_manager.users.add_user(user_model)
    else:
        if user.username != db_user.username:
            await db_manager.users.update_username(user.id, user.username)

    if not verification:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π requires_verification=True
        await db_manager.user_group_verifications.create_for_new_member(user.id, event.chat.id)
        logger.info(
            f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ù–û–í–û–ì–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –≤ –≥—Ä—É–ø–ø–µ {event.chat.id} (requires_verification=True)")
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–µ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await db_manager.user_group_verifications.update_requires_verification(user.id, event.chat.id, True)
        logger.info(f"–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤ –≥—Ä—É–ø–ø–µ {event.chat.id}")

    await db_manager.user_group_verifications.update_state(
        user.id, event.chat.id, VerificationStates.waiting_for_start.state
    )

    try:
        bot_username = (await event.bot.get_me()).username
        welcome_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü©∫ –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é",
                        url=f"https://t.me/{bot_username}?start=verify_{event.chat.id}"
                    )
                ]
            ]
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –±–æ—Ç–∞: {e}")
        welcome_keyboard = None

    try:
        welcome_msg = await event.bot.send_message(
            event.chat.id,
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{user.username or user.first_name}!\n\n"
            f"ü©∫ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.\n"
            f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
            f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {settings.format_verification_start_timeout()}, –∏–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.",
            reply_markup=welcome_keyboard,
            reply_to_message_id=None
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        asyncio.create_task(_delete_welcome_message(event.bot, event.chat.id, welcome_msg.message_id))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="ü©∫ –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é",
                    callback_data=f"start_verification:{event.chat.id}"
                )
            ]
        ]
    )

    try:
        await event.bot.send_message(
            user.id,
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤. "
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
            f"üîπ –£ –≤–∞—Å –µ—Å—Ç—å {settings.format_verification_start_timeout()} –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
            "üîπ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
        logger.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}.")

        asyncio.create_task(_schedule_user_removal(event.bot, user.id, db_manager, event.chat.id))

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

        try:
            bot_username = (await event.bot.get_me()).username
            warning_msg = await event.bot.send_message(
                event.chat.id,
                f"‚ö†Ô∏è @{user.username or user.first_name}, –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n\n"
                f"üëÜ [–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏](https://t.me/{bot_username}?start=verify_{event.chat.id})\n\n"
                f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {settings.format_verification_start_timeout()}, –∏–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.",
                reply_to_message_id=None,
                parse_mode="Markdown"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

            asyncio.create_task(_delete_welcome_message(event.bot, event.chat.id, warning_msg.message_id))

            asyncio.create_task(_schedule_user_removal(event.bot, user.id, db_manager, event.chat.id))

        except Exception as group_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {group_error}")


async def _schedule_user_removal(bot, user_id: int, db_manager: DatabaseManager, group_id: int = None):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞—á–∞–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é."""
    await asyncio.sleep(settings.verification_start_timeout_hours * 3600)

    try:
        if not settings.auto_delete_unverified:
            logger.info(f"–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        if group_id:
            verification = await db_manager.user_group_verifications.get_by_user_and_group(user_id, group_id)
            if verification and (verification.verified or (verification.state and verification.state not in ['waiting_for_start', None])):
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–∞—á–∞–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø–µ {group_id}, –æ—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")
                return

            try:
                await bot.ban_chat_member(group_id, user_id)
                await bot.unban_chat_member(group_id, user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")

                await db_manager.user_group_verifications.update_state(
                    user_id, group_id, VerificationStates.verification_timeout.state
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        else:
            active_groups = await db_manager.groups.get_active()

            for group in active_groups:
                verification = await db_manager.user_group_verifications.get_by_user_and_group(user_id, group.group_id)
                if verification and (verification.verified or (verification.state and verification.state not in ['waiting_for_start', None])):
                    continue

                try:
                    await bot.ban_chat_member(group.group_id, user_id)
                    await bot.unban_chat_member(group.group_id, user_id)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group.group_id}")

                    await db_manager.user_group_verifications.update_state(
                        user_id, group.group_id, VerificationStates.verification_timeout.state
                    )

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã {group.group_id}: {e}")

        try:
            await bot.send_message(
                user_id,
                "‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –Ω–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç "
                "–∏ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.\n\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception:
            pass

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–Ω–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ —Ç–∞–π–º-–∞—É—Ç—É: {e}")


async def _delete_welcome_message(bot, chat_id: int, message_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã."""
    await asyncio.sleep(2 * 60)

    try:
        await bot.delete_message(chat_id, message_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
