"""FSM —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, CommandObject

from bot.database.manager import DatabaseManager
from bot.database.models.verification_log import VerificationMethod
from bot.services.verification_service import VerificationService
from bot.states.verification import VerificationStates
from bot.utils.validators import (
    validate_full_name,
    validate_workplace,
    validate_website_url,
    validate_file_size,
    validate_file_type
)
from config.settings import settings
from loguru import logger


router = Router(name='verification')


@router.message(CommandStart(deep_link=True))
async def start_verification_with_params(
    message: Message,
    command: CommandObject,
    db_manager: DatabaseManager
):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    args = command.args

    if args and args.startswith("verify_"):
        group_id = int(args.replace("verify_", ""))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
        user = await db_manager.users.get_by_id(message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã.\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É, –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.",
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
        group = await db_manager.groups.get_by_id(group_id)
        if not group or not group.is_active:
            await message.answer(
                "‚ùå <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                "–£–∫–∞–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.",
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        verification = await db_manager.user_group_verifications.get_by_user_and_group(message.from_user.id, group_id)
        if not verification:
            await message.answer(
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
                "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.",
                parse_mode="HTML"
            )
            return

        if verification.verified:
            await message.answer(
                f"‚úÖ <b>–í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n"
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ \"{group.group_name}\" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
                parse_mode="HTML"
            )
            return

        if verification.attempts_count >= settings.max_verification_attempts:
            await message.answer(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
                f"–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group.group_name}\".\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü©∫ –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"start_verification:{group_id}")]
        ])

        remaining_attempts = settings.max_verification_attempts - verification.attempts_count

        await message.answer(
            f"üè• <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group.group_name}\"</b>\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.\n\n"
            "üìã <b>–ü—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n"
            "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
            "   ‚Ä¢ üåê –ß–µ—Ä–µ–∑ —Å–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
            "   ‚Ä¢ üìÑ –ß–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç (–¥–∏–ø–ª–æ–º/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n"
            f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_attempts}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:</b> {settings.format_verification_complete_timeout()}\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ fallback
    if args and args.startswith("verify_"):
        target_user_id = int(args.replace("verify_", ""))

        if message.from_user.id != target_user_id:
            return

    if message.from_user.id in settings.admin_user_ids:
        await message.answer(
            "üëë <b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.",
            parse_mode="HTML"
        )
        return

    user = await db_manager.users.get_by_id(message.from_user.id)
    if not user:
        await message.answer(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã.\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É, –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.",
            parse_mode="HTML"
        )
        return
    user_verifications = await db_manager.user_group_verifications.get_user_verifications(message.from_user.id)

    unverified_groups = []
    for verification in user_verifications:
        if not verification.verified and verification.attempts_count < settings.max_verification_attempts:
            group = await db_manager.groups.get_by_id(verification.group_id)
            if group and group.is_active:
                unverified_groups.append((group, verification))

    if not unverified_groups:
        await message.answer(
            "‚ÑπÔ∏è <b>–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–í—ã –ª–∏–±–æ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö, –ª–∏–±–æ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
        )
        return

    if len(unverified_groups) == 1:
        group, verification = unverified_groups[0]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü©∫ –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"start_verification:{group.group_id}")]
        ])

        remaining_attempts = settings.max_verification_attempts - verification.attempts_count

        await message.answer(
            f"üè• <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group.group_name}\"</b>\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.\n\n"
            "üìã <b>–ü—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n"
            "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
            "   ‚Ä¢ üåê –ß–µ—Ä–µ–∑ —Å–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
            "   ‚Ä¢ üìÑ –ß–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç (–¥–∏–ø–ª–æ–º/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n"
            f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_attempts}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:</b> {settings.format_verification_complete_timeout()}\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=keyboard
        )
    else:
        keyboard_buttons = []
        for group, verification in unverified_groups:
            remaining_attempts = settings.max_verification_attempts - verification.attempts_count
            button_text = f"ü©∫ {group.group_name} ({remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫)"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"start_verification:{group.group_id}"
            )])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await message.answer(
            "üè• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:",
            reply_markup=keyboard
        )


@router.message(Command("start"))
async def start_verification_command(
    message: Message,
    db_manager: DatabaseManager
):
    """–ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    if message.chat.type in ['group', 'supergroup']:
        if message.from_user.id in settings.admin_user_ids:
            return

        try:
            chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
            if chat_member.status in ['administrator', 'creator']:
                return
        except Exception:
            pass

        return

    if message.from_user.id in settings.admin_user_ids:
        await message.answer(
            "üëë <b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.",
            parse_mode="HTML"
        )
        return

    user = await db_manager.users.get_by_id(message.from_user.id)
    if not user:
        await message.answer(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã.\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É, –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.",
            parse_mode="HTML"
        )
        return

    user_verifications = await db_manager.user_group_verifications.get_user_verifications(message.from_user.id)

    unverified_groups = []
    for verification in user_verifications:
        if not verification.verified and verification.attempts_count < settings.max_verification_attempts:
            group = await db_manager.groups.get_by_id(verification.group_id)
            if group and group.is_active:
                unverified_groups.append((group, verification))

    if not unverified_groups:
        await message.answer(
            "‚ÑπÔ∏è <b>–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–í—ã –ª–∏–±–æ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö, –ª–∏–±–æ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
        )
        return

    if len(unverified_groups) == 1:
        group, verification = unverified_groups[0]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü©∫ –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"start_verification:{group.group_id}")]
        ])

        remaining_attempts = settings.max_verification_attempts - verification.attempts_count

        await message.answer(
            f"üè• <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group.group_name}\"</b>\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.\n\n"
            "üìã <b>–ü—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n"
            "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
            "   ‚Ä¢ üåê –ß–µ—Ä–µ–∑ —Å–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
            "   ‚Ä¢ üìÑ –ß–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç (–¥–∏–ø–ª–æ–º/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n"
            f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_attempts}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:</b> {settings.format_verification_complete_timeout()}\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=keyboard
        )
    else:
        keyboard_buttons = []
        for group, verification in unverified_groups:
            remaining_attempts = settings.max_verification_attempts - verification.attempts_count
            button_text = f"ü©∫ {group.group_name} ({remaining_attempts} –ø–æ–ø—ã—Ç–æ–∫)"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"start_verification:{group.group_id}"
            )])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await message.answer(
            "üè• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:",
            reply_markup=keyboard
        )


@router.callback_query(F.data.startswith("start_verification"))
async def start_verification_callback(
    callback: CallbackQuery,
    state: FSMContext,
    db_manager: DatabaseManager
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    await callback.answer()

    callback_parts = callback.data.split(":")
    if len(callback_parts) == 2 and callback_parts[1]:
        group_id = int(callback_parts[1])
        await state.update_data(group_id=group_id)
        logger.info(f"–ù–∞—á–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
    else:
        logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return

    await db_manager.user_group_verifications.get_or_create(callback.from_user.id, group_id)
    await db_manager.user_group_verifications.increment_attempts(callback.from_user.id, group_id)
    await db_manager.user_group_verifications.update_state(
        callback.from_user.id, group_id, VerificationStates.entering_full_name.state
    )

    await callback.message.edit_text(
        "üë§ <b>–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).\n"
        "–≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä:</b> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
    )

    await state.set_state(VerificationStates.entering_full_name)


@router.message(VerificationStates.entering_full_name)
async def process_full_name(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type in ["group", "supergroup"]:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            await message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É
            await message.bot.send_message(
                message.from_user.id,
                "‚ö†Ô∏è <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return

    if not message.text:
        try:
            await message.bot.send_message(
                message.from_user.id,
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º:"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    full_name = message.text.strip()

    is_valid, error_message = await validate_full_name(full_name)
    if not is_valid:
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</b> {error_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    await state.update_data(full_name=full_name)
    await db_manager.users.update_step(message.from_user.id, VerificationStates.entering_workplace.state)

    try:
        await message.bot.send_message(
            message.from_user.id,
            "üè• <b>–®–∞–≥ 2/4: –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.\n\n"
            "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ –ì–ë–£–ó \"–ì–æ—Ä–æ–¥—Å–∫–∞—è –±–æ–ª—å–Ω–∏—Ü–∞ ‚Ññ1\"\n"
            "‚Ä¢ –û–û–û \"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –ó–¥–æ—Ä–æ–≤—å–µ\"\n"
            "‚Ä¢ –§–ì–ë–£ \"–ù–ò–ò –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏\""
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
        await state.clear()
        return

    await state.set_state(VerificationStates.entering_workplace)


@router.message(VerificationStates.entering_workplace)
async def process_workplace(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type in ["group", "supergroup"]:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            await message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É
            await message.bot.send_message(
                message.from_user.id,
                "‚ö†Ô∏è <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return

    if not message.text:
        try:
            await message.bot.send_message(
                message.from_user.id,
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–º:"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    workplace = message.text.strip()

    is_valid, error_message = await validate_workplace(workplace)
    if not is_valid:
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</b> {error_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    await state.update_data(workplace=workplace)
    await db_manager.users.update_step(message.from_user.id, VerificationStates.choosing_verification_method.state)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üåê –ï—Å—Ç—å —Å–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            callback_data="method_website"
        )],
        [InlineKeyboardButton(
            text="üìÑ –ù–µ—Ç —Å–∞–π—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
            callback_data="method_document"
        )]
    ])

    try:
        await message.bot.send_message(
            message.from_user.id,
            "üîç <b>–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–∞—á–∞:\n\n"
            "üåê <b>–ß–µ—Ä–µ–∑ —Å–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (1-2 –º–∏–Ω—É—Ç—ã)\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –≤–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–º–µ–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç\n\n"
            "üìÑ <b>–ß–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç</b>\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–ø–ª–æ–º–∞/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (2-3 –º–∏–Ω—É—Ç—ã)\n"
            "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç —Å–∞–π—Ç–∞",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
        await state.clear()
        return

    await state.set_state(VerificationStates.choosing_verification_method)


@router.callback_query(F.data == "method_website")
async def choose_website_method(callback: CallbackQuery, state: FSMContext, db_manager: DatabaseManager):
    """–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç."""
    await callback.answer()

    await state.update_data(method=VerificationMethod.WEBSITE)
    await db_manager.users.update_step(callback.from_user.id, VerificationStates.entering_website_url.state)

    await callback.message.edit_text(
        "üåê <b>–®–∞–≥ 4/4: –£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ URL –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –≤–∞—à–µ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ hospital1.ru\n"
        "‚Ä¢ medcenter-health.com\n"
        "‚Ä¢ https://cardio-institute.org\n\n"
        "üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∏ —Å https://, –∏ –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"
    )

    await state.set_state(VerificationStates.entering_website_url)


@router.callback_query(F.data == "method_document")
async def choose_document_method(callback: CallbackQuery, state: FSMContext, db_manager: DatabaseManager):
    """–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç."""
    await callback.answer()

    await state.update_data(method=VerificationMethod.DOCUMENT)
    await db_manager.users.update_step(callback.from_user.id, VerificationStates.uploading_document.state)

    await callback.message.edit_text(
        "üìÑ <b>–®–∞–≥ 4/4: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç</b>\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Å–∫–∞–Ω –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n"
        "‚úÖ <b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
        "‚Ä¢ –î–∏–ø–ª–æ–º –æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏\n"
        "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n"
        "‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ —Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –≤—Ä–∞—á–∞\n\n"
        "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPEG, PNG –∏–ª–∏ PDF\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 20 –ú–ë\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ —á–∏—Ç–∞–µ–º—ã–º\n"
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞—à–µ –§–ò–û\n\n"
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª:"
    )

    await state.set_state(VerificationStates.uploading_document)


@router.message(VerificationStates.entering_website_url)
async def process_website_url(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL —Å–∞–π—Ç–∞."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type in ["group", "supergroup"]:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            await message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É
            await message.bot.send_message(
                message.from_user.id,
                "‚ö†Ô∏è <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return

    if not message.text:
        try:
            await message.bot.send_message(
                message.from_user.id,
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º:"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    url = message.text.strip()

    is_valid, validated_url_or_error = await validate_website_url(url)
    if not is_valid:
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL:</b> {validated_url_or_error}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å–∞–π—Ç–∞:"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    await state.update_data(website_url=validated_url_or_error)
    await db_manager.users.update_step(message.from_user.id, VerificationStates.processing_verification.state)

    verification_service = VerificationService(db_manager)
    await verification_service.start_verification_process(message, state)


@router.message(VerificationStates.uploading_document, F.photo)
async def process_document_photo(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type in ["group", "supergroup"]:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            await message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É
            await message.bot.send_message(
                message.from_user.id,
                "‚ö†Ô∏è <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return

    photo = message.photo[-1]

    is_valid, error_message = await validate_file_size(
        photo.file_size, settings.max_file_size_bytes, settings.max_file_size_mb
    )
    if not is_valid:
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚ùå <b>{error_message}</b>"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    await state.update_data(
        document_file_id=photo.file_id,
        document_type="photo"
    )
    await db_manager.users.update_step(message.from_user.id, VerificationStates.processing_verification.state)

    verification_service = VerificationService(db_manager)
    await verification_service.start_verification_process(message, state)


@router.message(VerificationStates.uploading_document, F.document)
async def process_document_file(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type in ["group", "supergroup"]:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            await message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É
            await message.bot.send_message(
                message.from_user.id,
                "‚ö†Ô∏è <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return

    document = message.document

    allowed_types = settings.allowed_file_types
    is_valid, error_message = await validate_file_type(document.mime_type, allowed_types)
    if not is_valid:
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚ùå <b>{error_message}</b>"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    is_valid, error_message = await validate_file_size(
        document.file_size, settings.max_file_size_bytes, settings.max_file_size_mb
    )
    if not is_valid:
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚ùå <b>{error_message}</b>"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await state.clear()
        return

    await state.update_data(
        document_file_id=document.file_id,
        document_type="document",
        document_mime_type=document.mime_type
    )
    await db_manager.users.update_step(message.from_user.id, VerificationStates.processing_verification.state)

    verification_service = VerificationService(db_manager)
    await verification_service.start_verification_process(message, state)


@router.message(VerificationStates.uploading_document)
async def process_invalid_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type in ["group", "supergroup"]:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            await message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É
            await message.bot.send_message(
                message.from_user.id,
                "‚ö†Ô∏è <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return

    try:
        await message.bot.send_message(
            message.from_user.id,
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫:\n"
            "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (JPEG, PNG)\n"
            "‚Ä¢ –§–∞–π–ª (PDF)\n\n"
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")


@router.callback_query(F.data == "view_profile")
async def view_profile_callback(callback: CallbackQuery, db_manager: DatabaseManager):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.answer()

    verification_service = VerificationService(db_manager)
    profile_text = await verification_service.get_user_profile_text(callback.from_user.id)

    await callback.message.edit_text(profile_text)


@router.message(F.chat.type == "private")
async def block_unknown_users(message: Message, db_manager: DatabaseManager):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    user_id = message.from_user.id

    if user_id in settings.admin_user_ids:
        return

    user = await db_manager.users.get_by_id(user_id)
    if not user:
        return

    if user.verified:
        return

    if not user.state or user.state in ["left_group", "verification_timeout"]:
        return


verification_router = router
